head	1.3;
access;
symbols;
locks
	sklarm:1.3; strict;
comment	@# @;


1.3
date	2025.03.31.02.33.01;	author sklarm;	state Exp;
branches;
next	1.2;

1.2
date	2025.03.31.01.51.30;	author sklarm;	state Exp;
branches;
next	1.1;

1.1
date	2025.03.30.03.37.48;	author sklarm;	state Exp;
branches;
next	;


desc
@works, but the number and whitespace buttons are swapped
@


1.3
log
@moved thumb to double press for space and backspace
@
text
@import board
import busio
import time
import digitalio
import usb_hid
from adafruit_mcp230xx.mcp23008 import MCP23008
from adafruit_hid.keyboard import Keyboard
from adafruit_hid.keycode import Keycode

# Setup I2C for MCP23008
i2c = busio.I2C(board.SCL, board.SDA)
mcp = MCP23008(i2c)

# Set up MCP23008 pins as inputs with pull-ups (using pins 0 through 6)
pins = [mcp.get_pin(i) for i in range(7)]
for pin in pins:
    pin.direction = digitalio.Direction.INPUT
    pin.pull = digitalio.Pull.UP

# Initialize USB HID keyboard
keyboard = Keyboard(usb_hid.devices)

# Map MCP23008 physical pins to our key indices (0-6)
pin_to_key_index = {
    0: 0,  # physical pin 0 → key index 0
    1: 1,  # physical pin 1 → key index 1
    2: 2,  # physical pin 2 → key index 2
    3: 3,  # physical pin 3 → key index 3
    6: 4,  # physical pin 4 → key index 4
    5: 5,  # physical pin 5 → key index 5
    4: 6   # physical pin 6 → key index 6
}

# Variables for handling key states and chords
pressed_keys = [False] * 7  # 7 keys (indexed 0-6)
pending_combo = None
last_combo_time = 0
last_hold_time = 0
last_release_time = 0

# Timing parameters
minimum_hold_time = 0.01   # Seconds keys must be held to register a chord
combo_time_window = 0.01   # Allowed time window for chord detection
cooldown_time = 0.01       # Cooldown after sending a key to prevent repeats
release_time_window = 0.01  # Time window to ensure keys are released before new detection

# New variables for double-tap detection (for BACKSPACE and SPACE)
double_press_window = 0.3  # Seconds allowed between taps for a double press
last_backspace_time = 0
last_space_time = 0

# Define chord mappings
chords = {
    (0,): Keycode.E,
    (1,): Keycode.I,
    (2,): Keycode.A,
    (3,): Keycode.S,
    (4,): Keycode.BACKSPACE,  # Normal mapping; now only sent on double-tap
    (0, 1): Keycode.R,
    (0, 2): Keycode.O,
    (0, 3): Keycode.C,
    (1, 2): Keycode.N,
    (1, 3): Keycode.L,
    (2, 3): Keycode.T,
    (0, 5): Keycode.M,
    (1, 5): Keycode.G,
    (2, 5): Keycode.H,
    (3, 5): Keycode.B,
    (0, 4): Keycode.SPACE,      # Normal mapping; now only sent on double-tap
    (0, 1, 5): Keycode.Y,
    (0, 2, 5): Keycode.W,
    (0, 3, 5): Keycode.X,
    (1, 2, 5): Keycode.F,
    (1, 3, 5): Keycode.K,
    (2, 3, 5): Keycode.V,
    (0, 1, 2): Keycode.D,
    (1, 2, 3): Keycode.P,
    (0, 1, 2, 5): Keycode.J,
    (1, 2, 3, 5): Keycode.Z,
    (0, 1, 2, 3): Keycode.U,
    (0, 1, 2, 3, 5): Keycode.Q,
    (0, 6): Keycode.ONE,
    (1, 6): Keycode.TWO,
    (2, 6): Keycode.THREE,
    (3, 6): Keycode.FOUR,
    (0, 1, 6): Keycode.FIVE,
    (1, 2, 6): Keycode.SIX,
    (2, 3, 6): Keycode.SEVEN,
    (0, 2, 6): Keycode.EIGHT,
    (1, 3, 6): Keycode.NINE,
    (0, 3, 6): Keycode.UP_ARROW,
    (0, 1, 2, 6): Keycode.ZERO,
    (0, 1, 3, 6): Keycode.RIGHT_ARROW,
    (0, 2, 3, 6): Keycode.LEFT_ARROW,
    (1, 2, 3, 6): Keycode.ESCAPE,
    (0, 1, 2, 3, 6): Keycode.DOWN_ARROW,
    (6,): Keycode.SPACE,  # Also mapped here; double-tap takes precedence.
    (1, 4): Keycode.TAB,
    (2, 4): Keycode.PERIOD,
    (3, 4): Keycode.MINUS,
    (0, 2, 3): Keycode.SPACE,
    (0, 1, 3): Keycode.BACKSPACE,
    (2, 3, 4): Keycode.FORWARD_SLASH,
    (0, 1, 4): Keycode.ENTER,
    (0, 2, 4): Keycode.COMMA,  # Note: In the original, this chord was also set to EQUALS.
    (1, 3, 4): Keycode.LEFT_BRACKET,
    (0, 3, 4): Keycode.RIGHT_BRACKET,
    (2, 3, 4): Keycode.BACKSLASH,
    (1, 2, 4): Keycode.BACKSPACE,
    (0, 1, 3, 4): Keycode.QUOTE,
    (0, 2, 3, 4): Keycode.SEMICOLON,
    (0, 1, 2, 3, 4): Keycode.GRAVE_ACCENT
}

def check_chords():
    global pending_combo, last_combo_time, last_hold_time, last_release_time
    global last_backspace_time, last_space_time
    current_combo = tuple(i for i, pressed in enumerate(pressed_keys) if pressed)
    current_time = time.monotonic()

    if current_combo:
        # Check if keys are held for at least the minimum required time.
        if last_hold_time == 0:
            last_hold_time = current_time

        if (current_time - last_hold_time) >= minimum_hold_time:
            # Special handling for the (4,) chord (BACKSPACE)
            if current_combo == (4,):
                if last_backspace_time != 0 and (current_time - last_backspace_time) <= double_press_window:
                    # Double press detected – send BACKSPACE.
                    keyboard.press(Keycode.BACKSPACE)
                    keyboard.release_all()
                    last_backspace_time = 0  # Reset after double-tap
                    pending_combo = current_combo
                    last_combo_time = current_time
                    time.sleep(cooldown_time)
                else:
                    # First tap – record time, but do not send anything yet.
                    last_backspace_time = current_time

            # Special handling for the (6,) chord (SPACE)
            elif current_combo == (6,):
                if last_space_time != 0 and (current_time - last_space_time) <= double_press_window:
                    # Double press detected – send SPACE.
                    keyboard.press(Keycode.SPACE)
                    keyboard.release_all()
                    last_space_time = 0  # Reset after double-tap
                    pending_combo = current_combo
                    last_combo_time = current_time
                    time.sleep(cooldown_time)
                else:
                    # First tap – record time, but do not send anything yet.
                    last_space_time = current_time

            # Normal chord handling for all other chords.
            elif current_combo in chords:
                keyboard.press(chords[current_combo])
                keyboard.release_all()
                pending_combo = current_combo
                last_combo_time = current_time
                time.sleep(cooldown_time)
    else:
        # When no keys are pressed, reset pending combo and hold time.
        # Also, clear special double-tap states if the window has passed.
        if last_backspace_time != 0 and (current_time - last_backspace_time > double_press_window):
            last_backspace_time = 0
        if last_space_time != 0 and (current_time - last_space_time > double_press_window):
            last_space_time = 0
        pending_combo = None
        last_hold_time = 0
        last_release_time = current_time

# Main loop: update key states and check for chords
while True:
    for pin, index in pin_to_key_index.items():
        if not mcp.get_pin(pin).value:  # Pin is pressed (active low)
            if not pressed_keys[index]:
                pressed_keys[index] = True
        else:
            if pressed_keys[index]:
                pressed_keys[index] = False

    check_chords()
    time.sleep(0.05)
@


1.2
log
@works
@
text
@d23 1
a23 2
# Dictionary to map MCP23008 physical pins to specific key indices.
# These key indices remain the same as in your original chord mappings.
d25 7
a31 7
    0: 0,  # New physical pin 0 maps to key index 0 (originally pin 9)
    1: 1,  # New physical pin 1 maps to key index 1 (originally pin 10)
    2: 2,  # New physical pin 2 maps to key index 2 (originally pin 11)
    3: 3,  # New physical pin 3 maps to key index 3 (originally pin 12)
    6: 4,  # New physical pin 4 maps to key index 4 (originally pin 5)
    5: 5,  # New physical pin 5 maps to key index 5 (originally pin 6)
    4: 6   # New physical pin 6 maps to key index 6 (originally pin 7)
d35 1
a35 1
pressed_keys = [False] * 7  # 7 keys mapped from MCP23008 (indexed 0-6)
d42 4
a45 4
minimum_hold_time = 0.01   # Minimum time keys must be held to register a chord (in seconds)
combo_time_window = 0.01   # Time window for combo detection (in seconds)
cooldown_time = 0.01       # Cooldown time to prevent accidental repeats (in seconds)
release_time_window = 0.01  # Time window to ensure all keys are released before new detection (in seconds)
d47 6
a52 1
# Define chord mappings (do not change these)
d54 58
a111 22
    (0,): Keycode.E, (1,): Keycode.I, (2,): Keycode.A, (3,): Keycode.S, (4,): Keycode.SPACE,
    (0, 1): Keycode.R, (0, 2): Keycode.O, (0, 3): Keycode.C, (1, 2): Keycode.N,
    (1, 3): Keycode.L, (2, 3): Keycode.T, (0, 5): Keycode.M, (1, 5): Keycode.G,
    (2, 5): Keycode.H, (3, 5): Keycode.B, (0, 4): Keycode.SPACE,
    (0, 1, 5): Keycode.Y, (0, 2, 5): Keycode.W, (0, 3, 5): Keycode.X,
    (1, 2, 5): Keycode.F, (1, 3, 5): Keycode.K, (2, 3, 5): Keycode.V,
    (0, 1, 2): Keycode.D, (1, 2, 3): Keycode.P,
    (0, 1, 2, 5): Keycode.J, (1, 2, 3, 5): Keycode.Z,
    (0, 1, 2, 3): Keycode.U, (0, 1, 2, 3, 5): Keycode.Q,
    (0, 6): Keycode.ONE, (1, 6): Keycode.TWO, (2, 6): Keycode.THREE, (3, 6): Keycode.FOUR,
    (0, 1, 6): Keycode.FIVE, (1, 2, 6): Keycode.SIX, (2, 3, 6): Keycode.SEVEN,
    (0, 2, 6): Keycode.EIGHT, (1, 3, 6): Keycode.NINE,
    (0, 3, 6): Keycode.UP_ARROW, (0, 1, 2, 6): Keycode.ZERO,
    (0, 1, 3, 6): Keycode.RIGHT_ARROW, (0, 2, 3, 6): Keycode.LEFT_ARROW,
    (1, 2, 3, 6): Keycode.ESCAPE, (0, 1, 2, 3, 6): Keycode.DOWN_ARROW,
    (6,): Keycode.BACKSPACE, (1, 4): Keycode.TAB, (2, 4): Keycode.PERIOD,
    (3, 4): Keycode.MINUS, (0, 2, 3): Keycode.SPACE, (0, 1, 3): Keycode.BACKSPACE,
    (2, 3, 4): Keycode.FORWARD_SLASH, (0, 1, 4): Keycode.ENTER,
    (0, 2, 4): Keycode.COMMA, (0, 2, 4): Keycode.EQUALS,
    (1, 3, 4): Keycode.LEFT_BRACKET, (0, 3, 4): Keycode.RIGHT_BRACKET,
    (2, 3, 4): Keycode.BACKSLASH, (1, 2, 4): Keycode.BACKSPACE,
    (0, 1, 3, 4): Keycode.QUOTE, (0, 2, 3, 4): Keycode.SEMICOLON,
a114 1
# Function to check key combinations
d117 1
d122 1
a122 1
        # Check if the keys are held for the minimum required time
d127 35
a161 9
            if current_combo in chords:
                # Ensure keys are pressed within a short time window
                if pending_combo is None or (current_time - last_combo_time) <= combo_time_window:
                    if pending_combo != current_combo:  # Only register if it's a new combo
                        keyboard.press(chords[current_combo])
                        keyboard.release_all()
                        pending_combo = current_combo
                        last_combo_time = current_time
                        time.sleep(cooldown_time)  # Cooldown to prevent accidental repeats
d163 9
a171 5
        # Reset pending combo and hold time when all keys are released
        if last_release_time == 0 or (current_time - last_release_time) >= release_time_window:
            pending_combo = None
            last_hold_time = 0
            last_release_time = current_time
d173 1
a173 1
# Main loop to monitor MCP23008 pin presses
a182 1
    # Check for key combinations and chords
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
    4: 4,  # New physical pin 4 maps to key index 4 (originally pin 5)
d32 1
a32 1
    6: 6   # New physical pin 6 maps to key index 6 (originally pin 7)
@
